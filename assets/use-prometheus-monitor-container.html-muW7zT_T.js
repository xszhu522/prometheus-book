import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as d,a as e,b as a,e as n,d as s}from"./app-tU1o2vQf.js";const c="/prometheus-book/assets/cadvisor-total-usage-UHZe2i-F.png",l="/prometheus-book/assets/prometheus_targetes_with_cadvisor-SEF83CYG.png",u="/prometheus-book/assets/promql_container_cpu_usage-uu-n9rjj.png",p="/prometheus-book/assets/container_network_receive_bytes_total-h-UXd9Wi.png",m="/prometheus-book/assets/container_network_transmit_bytes_total-xQp05dBu.png",v="/prometheus-book/assets/container_fs_reads_bytes_total-tA1wWEtO.png",_="/prometheus-book/assets/container_fs_writes_bytes_total-Zdi2wC3Y.png",g={},b=s(`<h1 id="容器监控-cadvisor" tabindex="-1"><a class="header-anchor" href="#容器监控-cadvisor" aria-hidden="true">#</a> 容器监控：cAdvisor</h1><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux/Windows/Mac机器上。容器镜像正成为一个新的标准化软件交付方式。</p><p>例如，可以通过以下命令快速在本地启动一个Nginx服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了能够获取到Docker容器的运行状态，用户可以通过Docker的stats命令获取到当前主机上运行容器的统计信息，可以查看容器的CPU利用率、内存使用量、网络IO总量以及磁盘IO总量等信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> stats
CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
9a1648bec3b2        <span class="token number">0.30</span>%               196KiB / <span class="token number">3</span>.855GiB     <span class="token number">0.00</span>%               828B / 0B           827kB / 0B          <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用命令以外，用户还可以通过Docker提供的HTTP API查看容器详细的监控统计信息。</p><h2 id="使用cadvisor" tabindex="-1"><a class="header-anchor" href="#使用cadvisor" aria-hidden="true">#</a> 使用CAdvisor</h2><p>CAdvisor是Google开源的一款用于展示和分析容器运行状态的可视化工具。通过在主机上运行CAdvisor用户可以轻松的获取到当前主机上容器的运行统计信息，并以图表的形式向用户展示。</p><p>在本地运行CAdvisor也非常简单，直接运行一下命令即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/:/rootfs:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/run:/var/run:rw <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/sys:/sys:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--volume</span><span class="token operator">=</span>/var/lib/docker/:/var/lib/docker:ro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--publish</span><span class="token operator">=</span><span class="token number">8080</span>:8080 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--detach</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span><span class="token operator">=</span>cadvisor <span class="token punctuation">\\</span>
  google/cadvisor:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),h={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},k=e("figure",null,[e("img",{src:c,alt:"CAdvisor可视化：CPU总量",tabindex:"0",loading:"lazy"}),e("figcaption",null,"CAdvisor可视化：CPU总量")],-1),f=e("p",null,"CAdvisor是一个简单易用的工具，相比于使用Docker命令行工具，用户不用再登录到服务器中即可以可视化图表的形式查看主机上所有容器的运行状态。",-1),q={href:"http://localhost:8080/metrics",target:"_blank",rel:"noopener noreferrer"},x=s(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP cadvisor_version_info A metric with a constant &#39;1&#39; value labeled by kernel version, OS version, docker version, cadvisor version &amp; cadvisor revision.
# TYPE cadvisor_version_info gauge
cadvisor_version_info{cadvisorRevision=&quot;1e567c2&quot;,cadvisorVersion=&quot;v0.28.3&quot;,dockerVersion=&quot;17.09.1-ce&quot;,kernelVersion=&quot;4.9.49-moby&quot;,osVersion=&quot;Alpine Linux v3.4&quot;} 1
# HELP container_cpu_load_average_10s Value of container cpu load average over the last 10 seconds.
# TYPE container_cpu_load_average_10s gauge
container_cpu_load_average_10s{container_label_maintainer=&quot;&quot;,id=&quot;/&quot;,image=&quot;&quot;,name=&quot;&quot;} 0
container_cpu_load_average_10s{container_label_maintainer=&quot;&quot;,id=&quot;/docker&quot;,image=&quot;&quot;,name=&quot;&quot;} 0
container_cpu_load_average_10s{container_label_maintainer=&quot;&quot;,id=&quot;/docker/15535a1e09b3a307b46d90400423d5b262ec84dc55b91ca9e7dd886f4f764ab3&quot;,image=&quot;busybox&quot;,name=&quot;lucid_shaw&quot;} 0
container_cpu_load_average_10s{container_label_maintainer=&quot;&quot;,id=&quot;/docker/46750749b97bae47921d49dccdf9011b503e954312b8cffdec6268c249afa2dd&quot;,image=&quot;google/cadvisor:latest&quot;,name=&quot;cadvisor&quot;} 0
container_cpu_load_average_10s{container_label_maintainer=&quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;,id=&quot;/docker/f51fd4d4f410965d3a0fd7e9f3250218911c1505e12960fb6dd7b889e75fc114&quot;,image=&quot;nginx&quot;,name=&quot;confident_brattain&quot;} 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面表格中列举了一些CAdvisor中获取到的典型监控指标：</p><table><thead><tr><th>指标名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>container_cpu_load_average_10s</td><td>gauge</td><td>过去10秒容器CPU的平均负载</td></tr><tr><td>container_cpu_usage_seconds_total</td><td>counter</td><td>容器在每个CPU内核上的累积占用时间 (单位：秒)</td></tr><tr><td>container_cpu_system_seconds_total</td><td>counter</td><td>System CPU累积占用时间（单位：秒）</td></tr><tr><td>container_cpu_user_seconds_total</td><td>counter</td><td>User CPU累积占用时间（单位：秒）</td></tr><tr><td>container_fs_usage_bytes</td><td>gauge</td><td>容器中文件系统的使用量(单位：字节)</td></tr><tr><td>container_fs_limit_bytes</td><td>gauge</td><td>容器可以使用的文件系统总量(单位：字节)</td></tr><tr><td>container_fs_reads_bytes_total</td><td>counter</td><td>容器累积读取数据的总量(单位：字节)</td></tr><tr><td>container_fs_writes_bytes_total</td><td>counter</td><td>容器累积写入数据的总量(单位：字节)</td></tr><tr><td>container_memory_max_usage_bytes</td><td>gauge</td><td>容器的最大内存使用量（单位：字节）</td></tr><tr><td>container_memory_usage_bytes</td><td>gauge</td><td>容器当前的内存使用量（单位：字节</td></tr><tr><td>container_spec_memory_limit_bytes</td><td>gauge</td><td>容器的内存使用量限制</td></tr><tr><td>machine_memory_bytes</td><td>gauge</td><td>当前主机的内存总量</td></tr><tr><td>container_network_receive_bytes_total</td><td>counter</td><td>容器网络累积接收数据总量（单位：字节）</td></tr><tr><td>container_network_transmit_bytes_total</td><td>counter</td><td>容器网络累积传输数据总量（单位：字节）</td></tr></tbody></table><h2 id="与prometheus集成" tabindex="-1"><a class="header-anchor" href="#与prometheus集成" aria-hidden="true">#</a> 与Prometheus集成</h2><p>修改/etc/prometheus/prometheus.yml，将cAdvisor添加监控数据采集任务目标当中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> cadvisor
  <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动Prometheus服务:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>/etc/prometheus/prometheus.yml <span class="token parameter variable">--storage.tsdb.path</span><span class="token operator">=</span>/data/prometheus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启动完成后，可以在Prometheus UI中查看到当前所有的Target状态：</p><figure><img src="`+l+`" alt="Target" tabindex="0" loading="lazy"><figcaption>Target</figcaption></figure><p>当能够正常采集到cAdvisor的样本数据后，可以通过以下表达式计算容器的CPU使用率：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(irate(container_cpu_usage_seconds_total{image!=&quot;&quot;}[1m])) without (cpu)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="容器CPU使用率" tabindex="0" loading="lazy"><figcaption>容器CPU使用率</figcaption></figure><p>查询容器内存使用量（单位：字节）:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>container_memory_usage_bytes{image!=&quot;&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询容器网络接收量速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_network_receive_bytes_total{image!=&quot;&quot;}[1m])) without (interface)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="容器网络接收量 字节/秒" tabindex="0" loading="lazy"><figcaption>容器网络接收量 字节/秒</figcaption></figure><p>查询容器网络传输量速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_network_transmit_bytes_total{image!=&quot;&quot;}[1m])) without (interface)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="容器网络传输量 字节/秒" tabindex="0" loading="lazy"><figcaption>容器网络传输量 字节/秒</figcaption></figure><p>查询容器文件系统读取速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_fs_reads_bytes_total{image!=&quot;&quot;}[1m])) without (device)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="容器文件系统读取速率 字节/秒" tabindex="0" loading="lazy"><figcaption>容器文件系统读取速率 字节/秒</figcaption></figure><p>查询容器文件系统写入速率（单位：字节/秒）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(rate(container_fs_writes_bytes_total{image!=&quot;&quot;}[1m])) without (device)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="容器文件系统写入速率 字节/秒" tabindex="0" loading="lazy"><figcaption>容器文件系统写入速率 字节/秒</figcaption></figure>',27);function y(C,P){const t=i("ExternalLinkIcon");return r(),d("div",null,[b,e("p",null,[a("通过访问"),e("a",h,[a("http://localhost:8080"),n(t)]),a("可以查看，当前主机上容器的运行状态，如下所示：")]),k,f,e("p",null,[a("而在多主机的情况下，在所有节点上运行一个CAdvisor再通过各自的UI查看监控信息显然不太方便，同时CAdvisor默认只保存2分钟的监控数据。好消息是CAdvisor已经内置了对Prometheus的支持。访问"),e("a",q,[a("http://localhost:8080/metrics"),n(t)]),a("即可获取到标准的Prometheus监控样本输出:")]),x])}const U=o(g,[["render",y],["__file","use-prometheus-monitor-container.html.vue"]]);export{U as default};
