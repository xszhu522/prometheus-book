import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as d,d as a}from"./app-NWC4HiYT.js";const i={},l=a(`<h1 id="promql聚合操作" tabindex="-1"><a class="header-anchor" href="#promql聚合操作" aria-hidden="true">#</a> PromQL聚合操作</h1><p>Prometheus还提供了下列内置的聚合操作符，这些操作符作用域瞬时向量。可以将瞬时表达式返回的样本数据进行聚合，形成一个新的时间序列。</p><ul><li><code>sum</code> (求和)</li><li><code>min</code> (最小值)</li><li><code>max</code> (最大值)</li><li><code>avg</code> (平均值)</li><li><code>stddev</code> (标准差)</li><li><code>stdvar</code> (标准方差)</li><li><code>count</code> (计数)</li><li><code>count_values</code> (对value进行计数)</li><li><code>bottomk</code> (后n条时序)</li><li><code>topk</code> (前n条时序)</li><li><code>quantile</code> (分位数)</li></ul><p>使用聚合操作的语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;aggr-op&gt;([parameter,] &lt;vector expression&gt;) [without|by (&lt;label list&gt;)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中只有<code>count_values</code>, <code>quantile</code>, <code>topk</code>, <code>bottomk</code>支持参数(parameter)。</p><p>without用于从计算结果中移除列举的标签，而保留其它标签。by则正好相反，结果向量中只保留列出的标签，其余标签则移除。通过without和by可以按照样本的问题对数据进行聚合。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(http_requests_total) without (instance)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等价于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(http_requests_total) by (code,handler,job,method)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只需要计算整个应用的HTTP请求总量，可以直接使用表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sum(http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>count_values用于时间序列中每一个样本值出现的次数。count_values会为每一个唯一的样本值输出一个时间序列，并且每一个时间序列包含一个额外的标签。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>count_values(&quot;count&quot;, http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>topk和bottomk则用于对样本值进行排序，返回当前样本值前n位，或者后n位的时间序列。</p><p>获取HTTP请求数前5位的时序样本数据，可以使用表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>topk(5, http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>quantile用于计算当前样本数据值的分布情况quantile(φ, express)其中0 ≤ φ ≤ 1。</p><p>例如，当φ为0.5时，即表示找到当前样本数据中的中位数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>quantile(0.5, http_requests_total)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,22),s=[l];function o(n,c){return t(),d("div",null,s)}const p=e(i,[["render",o],["__file","prometheus-aggr-ops.html.vue"]]);export{p as default};
