import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c,a as n,b as s,e as i,d as p}from"./app-tU1o2vQf.js";const r="/prometheus-book/assets/prometheus_ui_targets-99AQMGms.png",l="/prometheus-book/assets/prometheus_ui_targets_status-yMiIf6dO.png",u={},d=p(`<h1 id="任务和实例" tabindex="-1"><a class="header-anchor" href="#任务和实例" aria-hidden="true">#</a> 任务和实例</h1><p>在上一小节中，通过在prometheus.yml配置文件中，添加如下配置。我们让Prometheus可以从node exporter暴露的服务中获取监控指标数据。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;prometheus&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9090&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;node&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9100&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们需要采集不同的监控指标(例如：主机、MySQL、Nginx)时，我们只需要运行相应的监控采集程序，并且让Prometheus Server知道这些Exporter实例的访问地址。在Prometheus中，每一个暴露监控样本数据的HTTP服务称为一个实例。例如在当前主机上运行的node exporter可以被称为一个实例(Instance)。</p><p>而一组用于相同采集目的的实例，或者同一个采集进程的多个副本则通过一个一个任务(Job)进行管理。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* job: node
    * instance 2: 1.2.3.4:9100
    * instance 4: 5.6.7.8:9100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前在每一个Job中主要使用了静态配置(static_configs)的方式定义监控目标。除了静态配置每一个Job的采集Instance地址以外，Prometheus还支持与DNS、Consul、E2C、Kubernetes等进行集成实现自动发现Instance实例，并从这些Instance上获取监控数据。</p><p>除了通过使用“up”表达式查询当前所有Instance的状态以外，还可以通过Prometheus UI中的Targets页面查看当前所有的监控采集任务，以及各个任务下所有实例的状态:</p><figure><img src="`+r+'" alt="target列表以及状态" tabindex="0" loading="lazy"><figcaption>target列表以及状态</figcaption></figure>',9),m={href:"http://192.168.33.10:9090/targets",target:"_blank",rel:"noopener noreferrer"},g=n("figure",null,[n("img",{src:l,alt:"Targets状态",tabindex:"0",loading:"lazy"}),n("figcaption",null,"Targets状态")],-1);function k(_,h){const e=t("ExternalLinkIcon");return o(),c("div",null,[d,n("p",null,[s("我们也可以访问"),n("a",m,[s("http://192.168.33.10:9090/targets"),i(e)]),s("直接从Prometheus的UI中查看当前所有的任务以及每个任务对应的实例信息。")]),g])}const f=a(u,[["render",k],["__file","prometheus-job-and-instance.html.vue"]]);export{f as default};
