import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as t,c as s,a as r,b as a,e as d,d as h}from"./app-NWC4HiYT.js";const i="/prometheus-book/assets/dashboard-components-bEUWVFYd.png",l={},f=h('<h1 id="grafana简介" tabindex="-1"><a class="header-anchor" href="#grafana简介" aria-hidden="true">#</a> Grafana简介</h1><p>Console Template虽然能满足一定的可视化需求，但是也仅仅是对Prometheus的基本能力的补充。同时使用也会有许多问题，首先用户需要学习和了解Go Template模板语言，并且其支持的可视化图表类型也非常有限，最后其管理也有一定的成本。在第1章的“初识Prometheus”中我们已经尝试通过Grafana快速搭建过一个主机监控的Dashboard，在本章中将会带来读者学习如何使用Grafana创建更加精美的可视化报表。</p><h2 id="grafana基本概念" tabindex="-1"><a class="header-anchor" href="#grafana基本概念" aria-hidden="true">#</a> Grafana基本概念</h2><p>首先Grafana是一个通用的可视化工具。‘通用’意味着Grafana不仅仅适用于展示Prometheus下的监控数据，也同样适用于一些其他的数据可视化需求。在开始使用Grafana之前，我们首先需要明确一些Grafana下的基本概念，以帮助用户能够快速理解Grafana。</p><h3 id="数据源-data-source" tabindex="-1"><a class="header-anchor" href="#数据源-data-source" aria-hidden="true">#</a> 数据源（Data Source）</h3><p>\b对于Grafana而言，Prometheus这类为其提供\b数据的对象均称为数据源（Data Source）。目前，Grafana官方提供了对：Graphite, InfluxDB, OpenTSDB, Prometheus, Elasticsearch, CloudWatch的支持。对于Grafana管理员而言，只需要将这些对象以数据源的形式添加到Grafana中，Grafana便可以轻松的实现对这些\b数据的可视化工作。</p><h3 id="仪表盘-dashboard" tabindex="-1"><a class="header-anchor" href="#仪表盘-dashboard" aria-hidden="true">#</a> 仪表盘（Dashboard）</h3><p>通过数据源定义好可视化的数据来源之后，对于用户而言最重要的事情就是实现数据的可视化。在Grafana中，我们通过Dashboard来组织和管理我们的数据可视化图表：</p><figure><img src="'+i+'" alt="Grafana Dashboard" tabindex="0" loading="lazy"><figcaption>Grafana Dashboard</figcaption></figure><p>如上所示，在一个Dashboard中一个最基本的可视化单元为一个<strong>Panel（面板）</strong>，Panel通过如趋势图，热力图的形式展示可视化数据。 并且在Dashboard中每一个Panel是一个完全独立的部分，通过Panel的**Query Editor（查询编辑器）**我们可以为每一个Panel设置查询的数据源以及数据查询方式，例如，如果以Prometheus作为数据源，那在Query Editor中，我们实际上使用的是PromQL，而Panel则会负责从特定的Prometheus中查询出\b相应的数据，并且将其可视化。由于每个Panel是完全独立的，因此在一个Dashboard中，往往可能会包含来自多个Data Source的数据。</p><p>Grafana通过插件的形式提供了多种\b\bPanel的实现，常用的如：Graph Panel，Heatmap Panel，SingleStat Panel以及Table Panel等。用户还可通过插件安装更多类型的Panel面板。</p><p>除了Panel以外，在Dashboard页面中，我们还可以定义一个<strong>Row（行）</strong>，来组织和管理一组相关的Panel。</p>',12),c=r("strong",null,"Templating variables（模板参数）",-1),b={href:"https://grafana.com/dashboards",target:"_blank",rel:"noopener noreferrer"},p=r("h3",{id:"组织和用户",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#组织和用户","aria-hidden":"true"},"#"),a(" 组织和用户")],-1),u=r("p",null,[a("作为一个通用可视化工具，Grafana除了提供灵活的可视化定制能力以外，还提供了面向企业的组织级管理能力。在Grafana中Dashboard是属于一个"),r("strong",null,"Organization（组织）"),a("，通过Organization，可以在更大规模上使用Grafana，例如对于一个企业而言，我们可以创建多个Organization，其中**User（用户）**可以属于一个或多个不同的Organization。 并且在不同的Organization下，可以为User赋予不同的权限。 从而可以有效的根据企业的组织架构定义整个管理模型。")],-1);function g(m,G){const e=o("ExternalLinkIcon");return t(),s("div",null,[f,r("p",null,[a("除了Panel, Row这些对象以外，Grafana还允许用户为Dashboard定义"),c,a("，从而实现可以与用户动态交互的Dashboard页面。同时Grafana通过JSON\b数据结构管理了整个Dasboard的定义，因此这些Dashboard也是非常方便进行共享的。Grafana还专门为Dashboard提供了一个共享服务："),r("a",b,[a("https://grafana.com/dashboards"),d(e)]),a("，通过该服务用户可以轻松实现Dashboard的共享，同时我们也能快速的从中找到我们希望的Dashboard实现，并\b导入到自己的Grafana中。")]),p,u])}const D=n(l,[["render",g],["__file","grafana-intro.html.vue"]]);export{D as default};
