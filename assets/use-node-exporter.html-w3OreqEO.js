import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as s,c as a,a as e,b as o,e as n,d as t}from"./app-d7bHIUBF.js";const l="/prometheus-book/assets/node_exporter_home_page-tn00Pzf9.png",c="/prometheus-book/assets/node_exporter_metrics_page-QO5B-BGQ.png",p="/prometheus-book/assets/prometheus_ui_up_query-kiWA1n7T.png",u={},_=e("h1",{id:"使用node-exporter采集主机运行数据",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用node-exporter采集主机运行数据","aria-hidden":"true"},"#"),o(" 使用Node Exporter采集主机运行数据")],-1),m=e("h2",{id:"安装node-exporter",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装node-exporter","aria-hidden":"true"},"#"),o(" 安装Node Exporter")],-1),h=e("p",null,"在Prometheus的架构设计中，Prometheus Server并不直接服务监控特定的目标，其主要任务负责数据的收集，存储并且对外提供数据查询支持。因此为了能够监控到某些东西，如主机的CPU使用率，我们需要使用到Exporter。Prometheus周期性的从Exporter暴露的HTTP服务地址（通常是/metrics）拉取监控样本数据。",-1),x=e("p",null,"从上面的描述中可以看出Exporter可以是一个相对开放的概念，其可以是一个独立运行的程序独立于监控目标以外，也可以是直接内置在监控目标中。只要能够向Prometheus提供标准格式的监控样本数据即可。",-1),v={href:"https://github.com/prometheus/node_exporter",target:"_blank",rel:"noopener noreferrer"},g={href:"https://prometheus.io/download/",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -OL https://github.com/prometheus/node_exporter/releases/download/v0.15.2/node_exporter-0.15.2.darwin-amd64.tar.gz
tar -xzf node_exporter-0.15.2.darwin-amd64.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行node exporter:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd node_exporter-0.15.2.darwin-amd64
cp node_exporter-0.15.2.darwin-amd64/node_exporter /usr/local/bin/
node_exporter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功后，可以看到以下输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>INFO[0000] Listening on :9100                            source=&quot;node_exporter.go:76&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),f={href:"http://localhost:9100/",target:"_blank",rel:"noopener noreferrer"},E=e("figure",null,[e("img",{src:l,alt:"Node Exporter页面",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Node Exporter页面")],-1),P=e("h3",{id:"初始node-exporter监控指标",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#初始node-exporter监控指标","aria-hidden":"true"},"#"),o(" 初始Node Exporter监控指标")],-1),k={href:"http://localhost:9100/metrics",target:"_blank",rel:"noopener noreferrer"},q=t('<figure><img src="'+c+`" alt="主机监控指标" tabindex="0" loading="lazy"><figcaption>主机监控指标</figcaption></figure><p>每一个监控指标之前都会有一段类似于如下形式的信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># HELP node_cpu Seconds the cpus spent in each mode.
# TYPE node_cpu counter
node_cpu{cpu=&quot;cpu0&quot;,mode=&quot;idle&quot;} 362812.7890625
# HELP node_load1 1m load average.
# TYPE node_load1 gauge
node_load1 3.0703125
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中HELP用于解释当前指标的含义，TYPE则说明当前指标的数据类型。在上面的例子中node_cpu的注释表明当前指标是cpu0上idle进程占用CPU的总时间，CPU占用时间是一个只增不减的度量指标，从类型中也可以看出node_cpu的数据类型是计数器(counter)，与该指标的实际含义一致。又例如node_load1该指标反映了当前主机在最近一分钟以内的负载情况，系统的负载情况会随系统资源的使用而变化，因此node_load1反映的是当前状态，数据可能增加也可能减少，从注释中可以看出当前指标类型为仪表盘(gauge)，与指标反映的实际含义一致。</p><p>除了这些以外，在当前页面中根据物理主机系统的不同，你还可能看到如下监控指标：</p><ul><li>node_boot_time：系统启动时间</li><li>node_cpu：系统CPU使用量</li><li>node_disk_*：磁盘IO</li><li>node_filesystem_*：文件系统用量</li><li>node_load1：系统负载</li><li>node_memeory_*：内存使用量</li><li>node_network_*：网络带宽</li><li>node_time：当前系统时间</li><li>go_*：node exporter中go相关指标</li><li>process_*：node exporter自身进程相关运行指标</li></ul><h2 id="从node-exporter收集监控数据" tabindex="-1"><a class="header-anchor" href="#从node-exporter收集监控数据" aria-hidden="true">#</a> 从Node Exporter收集监控数据</h2><p>为了能够让Prometheus Server能够从当前node exporter获取到监控数据，这里需要修改Prometheus配置文件。编辑prometheus.yml并在scrape_configs节点下添加以下内容:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scrape_configs:
  - job_name: &#39;prometheus&#39;
    static_configs:
      - targets: [&#39;localhost:9090&#39;]
  # 采集node exporter监控数据
  - job_name: &#39;node&#39;
    static_configs:
      - targets: [&#39;localhost:9100&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动Prometheus Server</p>`,10),N={href:"http://localhost:9090",target:"_blank",rel:"noopener noreferrer"},w=t('<figure><img src="'+p+`" alt="Expression Browser" tabindex="0" loading="lazy"><figcaption>Expression Browser</figcaption></figure><p>如果Prometheus能够正常从node exporter获取数据，则会看到以下结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>up{instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;}	1
up{instance=&quot;localhost:9100&quot;,job=&quot;node&quot;}	1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中“1”表示正常，反之“0”则为异常。</p>`,4);function y(z,B){const r=i("ExternalLinkIcon");return s(),a("div",null,[_,m,h,x,e("p",null,[o("这里为了能够采集到主机的运行指标如CPU, 内存，磁盘等信息。我们可以使用"),e("a",v,[o("Node Exporter"),n(r)]),o("。")]),e("p",null,[o("Node Exporter同样采用Golang编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。可以从"),e("a",g,[o("https://prometheus.io/download/"),n(r)]),o("获取最新的node exporter版本的二进制包。")]),b,e("p",null,[o("访问"),e("a",f,[o("http://localhost:9100/"),n(r)]),o("可以看到以下页面：")]),E,P,e("p",null,[o("访问"),e("a",k,[o("http://localhost:9100/metrics"),n(r)]),o("，可以看到当前node exporter获取到的当前主机的所有监控数据，如下所示：")]),q,e("p",null,[o("访问"),e("a",N,[o("http://localhost:9090"),n(r)]),o("，进入到Prometheus Server。如果输入“up”并且点击执行按钮以后，可以看到如下结果：")]),w])}const C=d(u,[["render",y],["__file","use-node-exporter.html.vue"]]);export{C as default};
