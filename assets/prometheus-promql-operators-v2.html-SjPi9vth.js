import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as o,d}from"./app-d7bHIUBF.js";const i={},l=d(`<h1 id="promql操作符" tabindex="-1"><a class="header-anchor" href="#promql操作符" aria-hidden="true">#</a> PromQL操作符</h1><p>使用PromQL除了能够方便的按照查询和过滤时间序列以外，PromQL还支持丰富的操作符，用户可以使用这些操作符对进一步的对事件序列进行二次加工。这些操作符包括：数学运算符，逻辑运算符，布尔运算符等等。</p><h2 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算" aria-hidden="true">#</a> 数学运算</h2><p>例如，我们可以通过指标node_memory_free_bytes_total获取当前主机可用的内存空间大小，其样本单位为Bytes。这时如果客户端要求使用MB作为单位响应数据，那只需要将查询到的时间序列的样本值进行单位换算即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_memory_free_bytes_total / (1024 * 1024)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>node_memory_free_bytes_total表达式会查询出所有满足表达式条件的时间序列，在上一小节中我们称该表达式为瞬时向量表达式，而返回的结果成为瞬时向量。</p><p>当瞬时向量与标量之间进行数学运算时，数学运算符会依次作用于瞬时向量中的每一个样本值，从而得到一组新的时间序列。</p><p>而如果是瞬时向量与瞬时向量之间进行数学运算时，过程会相对复杂一点。 例如，如果我们想根据node_disk_bytes_written和node_disk_bytes_read获取主机磁盘IO的总量，可以使用如下表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_disk_bytes_written + node_disk_bytes_read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那这个表达式是如何工作的呢？依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行运算，如果没找到匹配元素，则直接丢弃。同时新的时间序列将不会包含指标名称。 该表达式返回结果的示例如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{device=&quot;sda&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node_exporter&quot;}=&gt;1634967552@1518146427.807 + 864551424@1518146427.807
{device=&quot;sdb&quot;,instance=&quot;localhost:9100&quot;,job=&quot;node_exporter&quot;}=&gt;0@1518146427.807 + 1744384@1518146427.807
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>PromQL支持的所有数学运算符如下所示：</p><ul><li><code>+</code> (加法)</li><li><code>-</code> (减法)</li><li><code>*</code> (乘法)</li><li><code>/</code> (除法)</li><li><code>%</code> (求余)</li><li><code>^</code> (幂运算)</li></ul><h2 id="使用布尔运算过滤时间序列" tabindex="-1"><a class="header-anchor" href="#使用布尔运算过滤时间序列" aria-hidden="true">#</a> 使用布尔运算过滤时间序列</h2><p>在PromQL通过标签匹配模式，用户可以根据时间序列的特征维度对其进行查询。而布尔运算则支持用户根据时间序列中样本的值，对时间序列进行过滤。</p><p>例如，通过数学运算符我们可以很方便的计算出，当前所有主机节点的内存使用率：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(node_memory_bytes_total - node_memory_free_bytes_total) / node_memory_bytes_total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而系统管理员在排查问题的时候可能只想知道当前内存使用率超过95%的主机呢？通过使用布尔运算符可以方便的获取到该结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(node_memory_bytes_total - node_memory_free_bytes_total) / node_memory_bytes_total &gt; 0.95
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>瞬时向量与标量进行布尔运算时，PromQL依次比较向量中的所有时间序列样本的值，如果比较结果为true则保留，反之丢弃。</p><p>瞬时向量与瞬时向量直接进行布尔运算时，同样遵循默认的匹配模式：依次找到与左边向量元素匹配（标签完全一致）的\b右边向量元素进行相应的操作，如果没找到匹配元素，则直接丢弃。</p><p>目前，Prometheus支持以下布尔运算符如下：</p><ul><li><code>==</code> (相等)</li><li><code>!=</code> (不相等)</li><li><code>&gt;</code> (大于)</li><li><code>&lt;</code> (小于)</li><li><code>&gt;=</code> (大于等于)</li><li><code>&lt;=</code> (小于等于)</li></ul><h2 id="使用bool修饰符改变布尔运算符的行为" tabindex="-1"><a class="header-anchor" href="#使用bool修饰符改变布尔运算符的行为" aria-hidden="true">#</a> 使用bool修饰符改变布尔运算符的行为</h2><p>布尔运算符的默认行为是对时序数据进行过滤。而在其它的情况下我们可能需要的是真正的布尔结果。例如，只需要知道当前模块的HTTP请求量是否&gt;=1000，如果大于等于1000则返回1（true）否则返回0（false）。这时可以使用bool修饰符改变布尔运算的默认行为。 例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http_requests_total &gt; bool 1000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用bool修改符后，布尔运算不会对时间序列进行过滤，而是直接依次瞬时向量中的各个样本数据与标量的比较结果0或者1。从而形成一条新的时间序列。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http_requests_total{code=&quot;200&quot;,handler=&quot;query&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;,method=&quot;get&quot;}  1
http_requests_total{code=&quot;200&quot;,handler=&quot;query_range&quot;,instance=&quot;localhost:9090&quot;,job=&quot;prometheus&quot;,method=&quot;get&quot;}  0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时需要注意的是，如果是在两个标量之间使用布尔运算，则必须使用bool修饰符</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>2 == bool 2 # 结果为1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用集合运算符" tabindex="-1"><a class="header-anchor" href="#使用集合运算符" aria-hidden="true">#</a> 使用集合运算符</h2><p>使用瞬时向量表达式能够获取到一个包含多个时间序列的集合，我们称为瞬时向量。 通过集合运算，可以在两个瞬时向量与瞬时向量之间进行相应的集合操作。目前，Prometheus支持以下集合运算符：</p><ul><li><code>and</code> (并且)</li><li><code>or</code> (或者)</li><li><code>unless</code> (排除)</li></ul><p><em><strong>vector1 and vector2</strong></em> 会产生一个由vector1的元素组成的新的向量。该向量包含vector1中完全匹配vector2中的元素组成。</p><p><em><strong>vector1 or vector2</strong></em> 会产生一个新的向量，该向量包含vector1中所有的\b样本数据，以及vector2中没有与vector1匹配到的样本数据。</p><p><em><strong>vector1 unless vector2</strong></em> 会产生一个新的向量，新向量中的元素由vector1中没有与vector2匹配的元素组成。</p><h2 id="操作符优先级" tabindex="-1"><a class="header-anchor" href="#操作符优先级" aria-hidden="true">#</a> 操作符优先级</h2><p>对于复杂类型的表达式，需要了解运算操作的运行优先级</p><p>例如，查询主机的CPU使用率，可以使用表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>100 * (1 - avg (irate(node_cpu{mode=&#39;idle&#39;}[5m])) by(job) )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中irate是PromQL中的内置函数，用于计算区间向量中时间序列每秒的即时增长率。关于内置函数的部分，会在下一节详细介绍。</p><p>在PromQL操作符中优先级由高到低依次为：</p><ol><li><code>^</code></li><li><code>*, /, %</code></li><li><code>+, -</code></li><li><code>==, !=, &lt;=, &lt;, &gt;=, &gt;</code></li><li><code>and, unless</code></li><li><code>or</code></li></ol><h2 id="匹配模式详解" tabindex="-1"><a class="header-anchor" href="#匹配模式详解" aria-hidden="true">#</a> 匹配模式详解</h2><p>向量与向量之间进行运算操作时会基于默认的匹配规则：依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行运算，如果没找到匹配元素，则直接丢弃。</p><p>接下来将介绍在PromQL中有两种典型的匹配模式：一对一（one-to-one）,多对一（many-to-one）或一对多（one-to-many）。</p><h3 id="一对一匹配" tabindex="-1"><a class="header-anchor" href="#一对一匹配" aria-hidden="true">#</a> 一对一匹配</h3><p>一对一\b匹配模式会从操作符两边表达式获取的瞬时向量依次比较并找到唯一匹配(标签完全一致)的样本值。默认情况下，使用表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vector1 &lt;operator&gt; vector2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在操作符两边表达式标签不一致的情况下，可以使用on(label list)或者ignoring(label list）来修改标签的匹配行为。使用ignoreing可以在匹配时忽略某些标签。而on则用于将匹配行为限定在某些标签之内。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;vector expr&gt; &lt;bin-op&gt; ignoring(&lt;label list&gt;) &lt;vector expr&gt;
&lt;vector expr&gt; &lt;bin-op&gt; on(&lt;label list&gt;) &lt;vector expr&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如当存在样本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m{method=&quot;get&quot;, code=&quot;500&quot;}  24
method_code:http_errors:rate5m{method=&quot;get&quot;, code=&quot;404&quot;}  30
method_code:http_errors:rate5m{method=&quot;put&quot;, code=&quot;501&quot;}  3
method_code:http_errors:rate5m{method=&quot;post&quot;, code=&quot;500&quot;} 6
method_code:http_errors:rate5m{method=&quot;post&quot;, code=&quot;404&quot;} 21

method:http_requests:rate5m{method=&quot;get&quot;}  600
method:http_requests:rate5m{method=&quot;del&quot;}  34
method:http_requests:rate5m{method=&quot;post&quot;} 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用PromQL表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m{code=&quot;500&quot;} / ignoring(code) method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式会返回在过去5分钟内，HTTP请求状态码为500的在所有请求中的比例。如果没有使用ignoring(code)，操作符两边表达式返回的瞬时向量中将找不到任何一个标签完全相同的匹配项。</p><p>因此结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{method=&quot;get&quot;}  0.04            //  24 / 600
{method=&quot;post&quot;} 0.05            //   6 / 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时由于method为put和del的\b样本\b找不到匹配项，因此不会出现在结果当中。</p><h3 id="多对一和一对多" tabindex="-1"><a class="header-anchor" href="#多对一和一对多" aria-hidden="true">#</a> 多对一和一对多</h3><p>多对一和一对多两种匹配模式指的是“一”侧的每一个向量元素可以与&quot;多&quot;侧的多个元素匹配的情况。在这种情况下，必须使用group修饰符：group_left或者group_right来确定哪一个向量具有更高的基数（充当“多”的角色）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;vector expr&gt; &lt;bin-op&gt; ignoring(&lt;label list&gt;) group_left(&lt;label list&gt;) &lt;vector expr&gt;
&lt;vector expr&gt; &lt;bin-op&gt; ignoring(&lt;label list&gt;) group_right(&lt;label list&gt;) &lt;vector expr&gt;
&lt;vector expr&gt; &lt;bin-op&gt; on(&lt;label list&gt;) group_left(&lt;label list&gt;) &lt;vector expr&gt;
&lt;vector expr&gt; &lt;bin-op&gt; on(&lt;label list&gt;) group_right(&lt;label list&gt;) &lt;vector expr&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多对一和一对多两种模式一定是出现在操作符两侧表达式返回的向量标签不一致的情况。因此需要使用ignoring和on修饰符来排除或者限定匹配的标签列表。</p><p>例如,使用表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>method_code:http_errors:rate5m / ignoring(code) group_left method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式中，左向量<code>method_code:http_errors:rate5m</code>包含两个标签method和code。而右向量<code>method:http_requests:rate5m</code>中只包含一个标签method，因此匹配时需要使用ignoring限定匹配的标签为code。 在限定匹配标签后，右向量中的元素可能匹配到多个左向量中的元素，因此该表达式的匹配模式为多对一，需要使用group修饰符group_left指定左向量具有更好的基数。</p><p>最终的运算结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{method=&quot;get&quot;, code=&quot;500&quot;}  0.04            //  24 / 600
{method=&quot;get&quot;, code=&quot;404&quot;}  0.05            //  30 / 600
{method=&quot;post&quot;, code=&quot;500&quot;} 0.05            //   6 / 120
{method=&quot;post&quot;, code=&quot;404&quot;} 0.175           //  21 / 120
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提醒：group修饰符只能在比较和数学运算符中使用。在逻辑运算and,unless和or才注意操作中默认与右向量中的所有元素进行匹配。</p></blockquote>`,69),r=[l];function a(n,s){return t(),o("div",null,r)}const m=e(i,[["render",a],["__file","prometheus-promql-operators-v2.html.vue"]]);export{m as default};
