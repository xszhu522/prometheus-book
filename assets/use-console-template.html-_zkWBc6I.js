import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as a,d as n}from"./app-NWC4HiYT.js";const s="/prometheus-book/assets/consoles_index-gpTKRASh.png",o="/prometheus-book/assets/head-3ZpMrdC9.png",i="/prometheus-book/assets/custom_index_head-9wBZY8O7.png",l="/prometheus-book/assets/query_graph-wcmunU_R.png",d="/prometheus-book/assets/prom_graph_timecontrol-lt703Uy7.png",r={},u=n('<h1 id="使用console-template" tabindex="-1"><a class="header-anchor" href="#使用console-template" aria-hidden="true">#</a> 使用Console Template</h1><p>在第1章以及第2章的内容中，读者已经对Prometheus已经有了一个相对完成的认识，并且我们已经学习了如何通过PromQL对时间序列数据进行查询和分析，并且通过Prometheus中的Graph面板查询数据形成图表。但是缺点也很明显，这些查询结果都是临时的，无法持久化的，更别说我们想实时关注某些特定监控指标的变化趋势。</p><p>为了简化这些问题Prometheus内置了一个简单的解决方案<code>Console Template</code>,它允许用户通过Go模板语言创建任意的控制台界面，并且通过Prometheus Server对外提供访问路径。</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>首先我们先从一个小例子开始，创建我们的第一个Console Template页面。与Console Template有关的两个启动参数为<code>--web.console.libraries</code>和<code>--web.console.templates</code>,其分别指定页面组件以及页面的存储路径。默认情况下其分别指向Prometheus当前安装路径的<code>console_libraries</code>和<code>consoles</code>目录。</p><p>Prometheus在<code>console_libraries</code>目录中已经内置了一些基本的界面组件，用户可以直接使用。</p><p>在<code>consoles</code>目录下创建index.html文件后，刷新Prometheus界面可以看到在顶部菜单中多了一个Consoles菜单项，如下所示。该选项默认指向<code>consoles/index.html</code>文件：</p><figure><img src="'+s+`" alt="Consoles菜单" tabindex="0" loading="lazy"><figcaption>Consoles菜单</figcaption></figure><p>当然，这个时候点击该菜单，我们会看到一个空白页。因为目前index.html文件中还未填充任何内容：</p><h2 id="定义页面菜单" tabindex="-1"><a class="header-anchor" href="#定义页面菜单" aria-hidden="true">#</a> 定义页面菜单</h2><p>首先，我们先直接使用console_libraries中定义的<code>head</code>组件，并加入到index.html文件中：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{template &quot;head&quot; .}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，如果我们刷新浏览器可以看到以下内容：</p><figure><img src="`+o+`" alt="默认的Head组件" tabindex="0" loading="lazy"><figcaption>默认的Head组件</figcaption></figure><p><code>head</code>组件的定义，读者可以通过关键字<code>define &quot;head&quot;</code>在console_libraries目录中查找。默认其应该是定义在<code>prom.lib</code>文件中：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> define <span class="token string">&quot;head&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;prom_console_head&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> template <span class="token string">&quot;navbar&quot;</span> <span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> end <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要定制化菜单的内容，那一样的读者只需要找到<code>navbar</code>组件的定义即可。当然用户也可以创建自己的组件。 例如，如果我们希望Console Template页面的菜单与Prometheus UI一致，只需要修改navbar组件的定义即可，找到<code>menu.lib</code>并修改navbar组件:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ define &quot;navbar&quot; }}
&lt;nav class=&quot;navbar navbar-inverse navbar-static-top&quot;&gt;
  &lt;div class=&quot;container-fluid&quot;&gt;
    &lt;!-- Brand and toggle get grouped for better mobile display --&gt;
    &lt;div class=&quot;navbar-header&quot;&gt;
      &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot;&gt;
        &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;
        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
        &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;a class=&quot;navbar-brand&quot; href=&quot;{{ pathPrefix }}/&quot;&gt;Prometheus&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;
      &lt;ul class=&quot;nav navbar-nav&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;{{ pathPrefix }}/alerts&quot;&gt;Alerts&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;{{ pathPrefix }}/graph&quot;&gt;Graph&lt;/a&gt;&lt;/li&gt;
      &lt;/div&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/nav&gt;
{{ end }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要侧边菜单栏，直接在head组件中移除<code>{{ template &quot;menu&quot; . }}</code>部分即可，修改后刷新页面，如下所示：</p><figure><img src="`+i+`" alt="自定义菜单" tabindex="0" loading="lazy"><figcaption>自定义菜单</figcaption></figure><p>无论是<code>.lib</code>文件还是<code>.html</code>文件均使用了Go Template的语言，感兴趣的读者可以自行在Go语言官网了解更多内容<code>https://golang.org/pkg/text/template/</code></p><h2 id="定义图表" tabindex="-1"><a class="header-anchor" href="#定义图表" aria-hidden="true">#</a> 定义图表</h2><p>在Console Template中我们可以在页面中使用内置的<code>PromConsole.Graph()</code>函数，该函数通过<code>head</code>加载相应的js源码，在该函数中，通过指定特定的DOM节点以及相应的PromQL表达式，即可在特定区域图形化显示相应的图表内容，如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;h1&gt;Prometheus HTTP Request Rate&lt;/h1&gt;

&lt;h3&gt;Queries&lt;/h3&gt;
&lt;div id=&quot;queryGraph&quot;&gt;&lt;/div&gt;
&lt;script&gt;
new PromConsole.Graph({
  node: document.querySelector(&quot;#queryGraph&quot;),
  expr: &quot;sum(rate(prometheus_http_request_duration_seconds_count{job=&#39;prometheus&#39;}[5m]))&quot;,
  name: &quot;Queries&quot;,
  yAxisFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,
  yHoverFormatter: PromConsole.NumberFormatter.humanizeNoSmallPrefix,
  yUnits: &quot;/s&quot;,
  yTitle: &quot;Queries&quot;
})
&lt;/script&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里创建了一个id为queryGraph的div节点，通过在页面中使用PromConsole.Graph函数，我们可以绘制出表达式<code>sum(rate(prometheus_http_request_duration_seconds_count{job=&#39;prometheus&#39;}[5m]))</code>的可视化图表如下所示：</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了最基本的node以及expr参数以外，该函数还支持的完整参数如下：</p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td>expr</td><td>Required. Expression to graph. Can be a list.</td></tr><tr><td>node</td><td>Required. DOM node to render into.</td></tr><tr><td>duration</td><td>Optional. Duration of the graph. Defaults to 1 hour.</td></tr><tr><td>endTime</td><td>Optional. Unixtime the graph ends at. Defaults to now.</td></tr><tr><td>width</td><td>Optional. Width of the graph, excluding titles. Defaults to auto-detection.</td></tr><tr><td>height</td><td>Optional. Height of the graph, excluding titles and legends. Defaults to 200 pixels.</td></tr><tr><td>min</td><td>Optional. Minimum x-axis value. Defaults to lowest data value.</td></tr><tr><td>max</td><td>Optional. Maximum y-axis value. Defaults to highest data value.</td></tr><tr><td>renderer</td><td>Optional. Type of graph. Options are line and area (stacked graph). Defaults to line.</td></tr><tr><td>name</td><td>Optional. Title of plots in legend and hover detail. If passed a string, [[ label ]] will be substituted with the label value. If passed a function, it will be passed a map of labels and should return the name as a string. Can be a list.</td></tr><tr><td>xTitle</td><td>Optional. Title of the x-axis. Defaults to Time.</td></tr><tr><td>yUnits</td><td>Optional. Units of the y-axis. Defaults to empty.</td></tr><tr><td>yTitle</td><td>Optional. Title of the y-axis. Defaults to empty.</td></tr><tr><td>yAxisFormatter</td><td>Optional. Number formatter for the y-axis. Defaults to PromConsole.NumberFormatter.humanize.</td></tr><tr><td>yHoverFormatter</td><td>Optional. Number formatter for the hover detail. Defaults to PromConsole.NumberFormatter.humanizeExact.</td></tr><tr><td>colorScheme</td><td>Optional. Color scheme to be used by the plots. Can be either a list of hex color codes or one of the color scheme names supported by Rickshaw. Defaults to &#39;colorwheel&#39;.</td></tr></tbody></table><p>需要注意的是，如果参数<code>expr</code>和<code>name</code>均是list类型，其必须是一一对应的。</p><p>除了直接使用<code>PromConsole.Graph</code>函数显示可视化图表以外，在Console Template中还可以使用模板组件<code>prom_query_drilldown</code>定义一个连接直接跳转到Graph页面，并显示相应表达式的查询结果， 如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;h3&gt;Links&lt;/h3&gt;
{{ template &quot;prom_query_drilldown&quot; (args &quot;prometheus_http_response_size_bytes_bucket&quot;) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了以上部分以外，我们也可以和原生Prometheus UI一样定义一个时间轴控制器，方便用户按需查询数据：</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>加入这个时间轴控制器的方式也很简单，直接引用以下模板即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ template &quot;prom_graph_timecontrol&quot; . }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,35),c=[u];function p(m,v){return t(),a("div",null,c)}const b=e(r,[["render",p],["__file","use-console-template.html.vue"]]);export{b as default};
