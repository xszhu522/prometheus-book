import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as r,d as h}from"./app-NWC4HiYT.js";const t={},d=h(`<h1 id="百里挑一" tabindex="-1"><a class="header-anchor" href="#百里挑一" aria-hidden="true">#</a> 百里挑一</h1><blockquote><p>TODO</p></blockquote><h2 id="prometheus-vs-graphite" tabindex="-1"><a class="header-anchor" href="#prometheus-vs-graphite" aria-hidden="true">#</a> Prometheus Vs Graphite</h2><h3 id="范围" tabindex="-1"><a class="header-anchor" href="#范围" aria-hidden="true">#</a> 范围</h3><p>Graphite专注于时序数据库本身，对外提供查询和图形可视化的功能。 而其他监控相关的问题都需要由外部组件来解决。</p><p>Prometheus则是一个完整的监控系统，包括内置的数据采集，存储，查询，图形可视化以及基于时间序列数据的告警能力。</p><h3 id="数据模型" tabindex="-1"><a class="header-anchor" href="#数据模型" aria-hidden="true">#</a> 数据模型</h3><p>Graphite和Prometheus一样，对基于时间序列的数据进行存储。</p><p>Graphite中的监控指标通过一组基于“.”的关键字维度组成：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>stats.api-server.tracks.post.500 -&gt; 93
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而Prometheus中，每一个监控指标拥有对个基于key-value形式的标签组成。 通过这些标签，我们可以更容易的对数据进行过滤，分组，以及查询。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>api_server_http_requests_total{method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample1&gt;&quot;} -&gt; 34
api_server_http_requests_total{method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample2&gt;&quot;} -&gt; 28
api_server_http_requests_total{method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample3&gt;&quot;} -&gt; 31
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h3><p>Graphite使用Whisper的格式将时间序列数据存储在本地磁盘中，这是一种RRD风格的数据库，期望采集到的样本数据能定期到达。每一条时间序列存储在单独的文件当中，并且新的样本数据会在一段时间后覆盖旧的样本数据。</p><p>Prometheus同样将时间序列数据分别存储在独立的本地磁盘中，但是运行样本已不同的周期进行采集。因为新的样本数据只是简单的追加到时间序列上，因此老的数据可能会保留较长的时间。Prometheus也适用于那些生命周期较短，变化频繁的时间序列。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>Prometehus提供了更灵活的数据模型以及查询语言，同时更容易运行以及集成到现有的环境中。但是如果你想要一个可以长期保存历史数据的集群解决方案，那么Graphite可能是一个更好的选择。</p><h2 id="prometheus-vs-influxdb" tabindex="-1"><a class="header-anchor" href="#prometheus-vs-influxdb" aria-hidden="true">#</a> Prometheus Vs InfluxDB</h2><p>InfluxDB是一个开源的时间序列数据库，同时具有支持扩展以及集群的商业版本。Prometheus和InfluxDB之间存在着一些显著的差异，并且由各自适用的使用场景。</p><p>但是当将Kapacitor和InfluxDB一起考虑时，它们的组合与Prometheus与AlertManager解决了相同的问题。</p><h3 id="范围-1" tabindex="-1"><a class="header-anchor" href="#范围-1" aria-hidden="true">#</a> 范围</h3><h3 id="数据模型-存储" tabindex="-1"><a class="header-anchor" href="#数据模型-存储" aria-hidden="true">#</a> 数据模型/存储</h3><h3 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计" aria-hidden="true">#</a> 架构设计</h3><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><h2 id="prometheus-vs-opentsdb" tabindex="-1"><a class="header-anchor" href="#prometheus-vs-opentsdb" aria-hidden="true">#</a> Prometheus Vs OpenTSDB</h2><h3 id="范围-2" tabindex="-1"><a class="header-anchor" href="#范围-2" aria-hidden="true">#</a> 范围</h3><h3 id="数据模型-1" tabindex="-1"><a class="header-anchor" href="#数据模型-1" aria-hidden="true">#</a> 数据模型</h3><h3 id="存储-1" tabindex="-1"><a class="header-anchor" href="#存储-1" aria-hidden="true">#</a> 存储</h3><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><h2 id="prometheus-vs-nagios" tabindex="-1"><a class="header-anchor" href="#prometheus-vs-nagios" aria-hidden="true">#</a> Prometheus Vs Nagios</h2><h3 id="范围-3" tabindex="-1"><a class="header-anchor" href="#范围-3" aria-hidden="true">#</a> 范围</h3><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构" aria-hidden="true">#</a> 架构</h3><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h3><h2 id="prometheus-vs-sensu" tabindex="-1"><a class="header-anchor" href="#prometheus-vs-sensu" aria-hidden="true">#</a> Prometheus vs. Sensu</h2><h2 id="范围-4" tabindex="-1"><a class="header-anchor" href="#范围-4" aria-hidden="true">#</a> 范围</h2><h3 id="数据模型-2" tabindex="-1"><a class="header-anchor" href="#数据模型-2" aria-hidden="true">#</a> 数据模型</h3><h3 id="架构-1" tabindex="-1"><a class="header-anchor" href="#架构-1" aria-hidden="true">#</a> 架构</h3><h3 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4" aria-hidden="true">#</a> 总结</h3>`,38),s=[d];function i(n,o){return a(),r("div",null,s)}const l=e(t,[["render",i],["__file","comparison_with_other.html.vue"]]);export{l as default};
