import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as s,c as l,a as e,b as t,e as o,d as r}from"./app-NWC4HiYT.js";const g="/prometheus-book/assets/grafana_singlestat_sample-as1oKgmu.png",p="/prometheus-book/assets/grafana_single_stat_sample-bV7Emlae.png",c="/prometheus-book/assets/grafana_single_stat_edit_options-fkjkNDL_.png",_="/prometheus-book/assets/grafana_single_stat_edit_value_mapping-CD8OyIOk.png",d="/prometheus-book/assets/grafana_single_stat_edit_value_mapping_emoji-oNBZzQmn.png",u={},m=r('<h1 id="当前状态-singlestat面板" tabindex="-1"><a class="header-anchor" href="#当前状态-singlestat面板" aria-hidden="true">#</a> 当前状态：SingleStat面板</h1><p>SingleStat Panel侧重于展示系统的当前状态而非变化趋势。如下所示，在以下场景中特别适用于使用SingleStat：</p><ul><li>当前系统中所有服务的运行状态；</li><li>当前基础设施资源的使用量；</li><li>当前系统中某些事件发生的次数或者资源数量等。</li></ul><p>如下所示，是使用SingleStat进行数据可视化的显示效果：</p><figure><img src="'+g+'" alt="SingleStat Panel示例" tabindex="0" loading="lazy"><figcaption>SingleStat Panel示例</figcaption></figure><h2 id="使用singlestat-panel" tabindex="-1"><a class="header-anchor" href="#使用singlestat-panel" aria-hidden="true">#</a> 使用SingleStat Panel</h2><p>从Dashboardc创建Singlestat Panel，并进入编辑页面， 如下所示：</p><figure><img src="'+p+`" alt="SingleStat 编辑页面" tabindex="0" loading="lazy"><figcaption>SingleStat 编辑页面</figcaption></figure><p>对于SingleStat Panel而言，其只能处理一条时间序列，否则页面中会提示“Multiple Series Error”错误信息。这里使用如下PromQL查询当前主机负载：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_load1{instance=&quot;localhost:9100&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，当前面板中会显示当前时间序列中所有样本的平均值，而实际情况下，我们\b需要显示的是当前主机当前的负载情况，因此需要通过SingleStat Panel的<strong>Options</strong>选项控制当前面板的显示模式：</p><figure><img src="`+c+'" alt="SingleStat Option选项" tabindex="0" loading="lazy"><figcaption>SingleStat Option选项</figcaption></figure><p>如上所示，通过Value配置项组可以控制当前面板中显示的值，以及字体大小等。对于主机负载而言，我们希望能够显示当前的最新值，因此修改Stat为<strong>Current</strong>即可。</p><p>如果希望面板能够根据不同的值显示不同的颜色的话，则可以定义<strong>Thresholds</strong>与<strong>Colors</strong>的映射\b关系，例如，定义Thresholds的分割区间值为“0,1”，则当Value的值落到不同的范围内时，将显示不同的颜色。</p><p>如果希望能够显示当前时间序列的样本值变化情况，则可以启用Spark lines配置。启用之后，Singlestat面板中除了会显示当前的最新样本值以外，也会同时将时间序列中的数据以趋势图的形式进行展示。</p><p>除了通过数字大小反应当前状态以外，在某些场景下我们可能\b\b更关心的是\b这些数字表示的意义。例如，在Prometheus监控服务的健康状态时，在样本数据中会通过0表示不健康，1表示健康。 但是如果直接将0或1显示在面板中，那么可视化效果将缺乏一定的可读性。</p><p>为了提升数字的可读性，可以在Singlestat Panel中可以通过<strong>Value Mappings</strong>定义值的映射关系。Siglesta支持值映射（value to text）和区间映射（range to text）两种方式。 如下所示：</p><figure><img src="'+_+'" alt="Singlestat value mappings配置" tabindex="0" loading="lazy"><figcaption>Singlestat value mappings配置</figcaption></figure>',18),S={href:"http://www.iemoji.com/",target:"_blank",rel:"noopener noreferrer"},h=e("figure",null,[e("img",{src:d,alt:"在Singlestat中使用Emoji表情字符",tabindex:"0",loading:"lazy"}),e("figcaption",null,"在Singlestat中使用Emoji表情字符")],-1);function f(b,x){const a=i("ExternalLinkIcon");return s(),l("div",null,[m,e("p",null,[t("当面板中Value的值在0~0.99范围内则显示为Health，否则显示为Unhealth。这种模式特别适合于展示服务的健康状态。 当然你也可以将Value映射为任意的字符，甚至是直接使用Emoji("),e("a",S,[t("http://www.iemoji.com/"),o(a)]),t(")表情：")]),h])}const P=n(u,[["render",f],["__file","use_singlestat_panel.html.vue"]]);export{P as default};
