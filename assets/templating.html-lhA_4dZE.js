import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as t,a,b as r,d as n}from"./app-d7bHIUBF.js";const o="/prometheus-book/assets/grafana_templating_variables_example-Bx-MaTgx.png",s="/prometheus-book/assets/grafana_templating_variables_example1-36fYsWjh.png",l="/prometheus-book/assets/grafana_templating_add_variables-EUvPJSLO.png",d="/prometheus-book/assets/grafana_templating_query_variables3-4jCkcAcg.png",m="/prometheus-book/assets/grafana_templating_variables_filter-DoY4zvsm.png",p="/prometheus-book/assets/grafana_templating_query_result-GjGmulPi.png",u="/prometheus-book/assets/grafana_templating_repeat_example1-EDYHBhSR.png",c="/prometheus-book/assets/grafana_templating_repeat_var-viFaHanS.png",g="/prometheus-book/assets/grafana_templating_repeat_e2-hCOqO-1F.png",h="/prometheus-book/assets/grafana_templating_repeat_e3-wwB8BQp1.png",f="/prometheus-book/assets/grafana_templating_repeat_row-NpSuUXaa.png",b={},_=n(`<h1 id="模板化dashboard" tabindex="-1"><a class="header-anchor" href="#模板化dashboard" aria-hidden="true">#</a> 模板化Dashboard</h1><p>在前面的小节中介绍了Grafana中4中常用的可视化面板的使用，通过在面板中使用PromQL表达式，Grafana能够方便的将Prometheus返回的数据进行可视化展示。例如，在展示主机CPU使用率时，我们使用了如下表达式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 - (avg(irate(node_cpu{mode=&#39;idle&#39;}[5m])) without (cpu))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式会返回当前Prometheus中存储的所有时间序列，每一台主机都会有一条单独的曲线用于体现其CPU使用率的变化情况：</p><figure><img src="`+o+'" alt="主机CPU使用率" tabindex="0" loading="lazy"><figcaption>主机CPU使用率</figcaption></figure><p>而当用户只想关注其中某些主机时，基于当前我们已经学习到的知识只有两种方式，要么每次手动修改Panel中的PromQL表达式，要么直接为这些主机创建单独的Panel。但是无论如何，这些硬编码方式都会直接导致Dashboard配置的频繁修改。在这一小节中我们将学习使用Dashboard变量的方式解决以上问题。</p><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>在Grafana中用户可以为Dashboard定义一组变量（Variables），变量一般包含一个到多个可选值。如下所示，Grafana通过将变量渲染为一个下拉框选项，从而使用户可以动态的改变变量的值：</p><figure><img src="'+s+`" alt="Dashboard变量" tabindex="0" loading="lazy"><figcaption>Dashboard变量</figcaption></figure><p>例如，这里定义了一个名为node的变量，用户可以通过在PromQL表达式或者Panel的标题中通过以下形式使用该变量：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 - (avg(irate(node_cpu{mode=&#39;idle&#39;, instance=~&quot;$node&quot;}[5m])) without (cpu))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>变量的值可以支持单选或者多选，当对接Prometheus时，Grafana会自动将$node的值格式化为如“<strong>host1|host2|host3</strong>”的形式。配合使用PromQL的标签正则匹配“<strong>=~</strong>”，通过动态改变PromQL从而实现基于标签快速对时间序列进行过滤。</p><h2 id="变量定义" tabindex="-1"><a class="header-anchor" href="#变量定义" aria-hidden="true">#</a> 变量定义</h2><p>通过Dashboard页面的Settings选项，可以进入Dashboard的配置页面并且选择Variables子菜单:</p><figure><img src="`+l+'" alt="为Dashboard添加变量" tabindex="0" loading="lazy"><figcaption>为Dashboard添加变量</figcaption></figure><p>用户需要指定变量的名称，后续用户就可以通过$variable_name的形式引用该变量。Grafana目前支持6种不同的变量类型，而能和Prometheus一起工作的主要包含以下5种类型：</p><table><thead><tr><th>类型</th><th>工作方式</th></tr></thead><tbody><tr><td>Query</td><td>允许用户通过Datasource查询表达式的返回值动态生成变量的可选值</td></tr><tr><td>Interval</td><td>该变量代表时间跨度，通过Interval类型的变量，可以动态改变PromQL区间向量表达式中的时间范围。如rate(node_cpu[2m])</td></tr><tr><td>Datasource</td><td>允许用户动态切换当前Dashboard的数据源，特别适用于同一个Dashboard展示多个数据源数据的情况</td></tr><tr><td>Custom</td><td>用户直接通过手动的方式，定义变量的可选值</td></tr><tr><td>Constant</td><td>常量，在导入Dashboard时，会要求用户设置该常量的值</td></tr></tbody></table><p>Label属性用于指定界面中变量的显示名称，Hide属性则用于指定在渲染界面时是否隐藏该变量的下拉框。</p><h2 id="使用变量过滤时间序列" tabindex="-1"><a class="header-anchor" href="#使用变量过滤时间序列" aria-hidden="true">#</a> 使用变量过滤时间序列</h2><p>当Prometheus同时采集了多个主机节点的监控样本数据时，用户希望能够手动选择并查看其中特定主机的监控数据。这时我们需要使用Query类型的变量。</p><figure><img src="'+d+`" alt="新建Query类型的变量" tabindex="0" loading="lazy"><figcaption>新建Query类型的变量</figcaption></figure><p>如上所示，这里我们为Dashboard创建了一个名为node的变量，并且指定其类型为Query。Query类型的变量，允许用户指定数据源以及查询表达式，并通过正则\b匹配（Regex）的方式对查询结果进行处理，从而动态生成变量的可选值。在这里指定了数据源为Prometheus，通过使用node_load1我们得到了两条时间序列：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node_load1{instance=&quot;foo:9100&quot;,job=&quot;node&quot;}
node_load1{instance=&quot;localhost:9100&quot;,job=&quot;node&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过指定正则匹配表达式为<code>/.*instance=&quot;([^&quot;]*).*/</code>从而匹配出标签instance的值作为node变量的所有可选项，即：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foo:9100
localhost:9100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Selection Options</strong>选项中可以指定该变量的下拉框是否支持多选，以及是否包含全选（All）选项。</p><p>保存变量后，用户可以在Panel的General或者Metrics中通过$node的方式使用该变量，如下所示：</p><figure><img src="`+m+`" alt="在Metrics中使用变量" tabindex="0" loading="lazy"><figcaption>在Metrics中使用变量</figcaption></figure><p>这里需要注意的是，如果允许用户多选在PromQL表达式中应该使用标签的正则匹配模式，因为Grafana会自动将多个选项格式化为如“foo:9100|localhost:9100”的形式。</p><p>使用Query类型的变量能够根据允许用户能够根据时间序列的特征维度对数据进行过滤。在定义Query类型变量时，除了使用PromQL查询时间序列以过滤标签的方式以外，Grafana还提供了几个有用的函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>label_values(label)</td><td>返回Prometheus所有监控指标中，标签名为label的所有可选值</td></tr><tr><td>label_values(metric, label)</td><td>返回Prometheus所有监控指标metric中，标签名为label的所有可选值</td></tr><tr><td>metrics(metric)</td><td>返回所有指标名称满足metric定义正则表达式的\b指标名称</td></tr><tr><td>query_result(query)</td><td>返回prometheus查询语句的查询结果</td></tr></tbody></table><p>例如，当需要监控Prometheus所有采集任务的状态时，可以使用如下方式，获取当前所有采集任务的名称：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>label_values(up, job)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，有时候我们想要动态修改变量查询结果。比如某一个节点绑定了多个ip，一个用于内网访问，一个用于外网访问，此时prometheus采集到的指标是内网的ip，但我们需要的是外网ip。这里我们想要能在Grafana中动态改变标签值，进行ip段的替换，而避免从prometheus或exporter中修改采集指标。</p><p>这时需要使用grafana的query_result函数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 将10.10.15.xxx段的ip地址替换为10.20.15.xxx段 注：替换端口同理
query_result(label_replace(kube_pod_info{pod=~&quot;$pod&quot;}, &quot;node&quot;, &quot;10.20.15.$1&quot;, &quot;node&quot;, &quot;10.10.15.(.*)&quot;))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 通过正则从返回结果中匹配出所需要的ip地址
regex：/.*node=&quot;(.*?)&quot;.*/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在grafana中配置如图： <img src="`+p+'" alt="Grafana中动态修改变量" loading="lazy"></p><h2 id="使用变量动态创建panel和row" tabindex="-1"><a class="header-anchor" href="#使用变量动态创建panel和row" aria-hidden="true">#</a> 使用变量动态创建Panel和Row</h2><p>当在一个Panel中展示多条时间序列数据时，通过使用变量可以轻松实现对时间序列的过滤，提高用户交互性。除此以外，我们还可以使用变量自动生成Panel或者Row。 如下所示，当需要可视化当前系统中所有采集任务的监控任务运行状态时，由于Prometheus的采集任务配置可能随时发生变更，通过硬编码的形式实现，会导致Dashboard配置的频繁变更：</p><figure><img src="'+u+'" alt="Prometheus采集任务状态" tabindex="0" loading="lazy"><figcaption>Prometheus采集任务状态</figcaption></figure><p>如下所示，这里为Dashboard定义了一遍名为job的变量：</p><figure><img src="'+c+`" alt="使用变量获取当前所有可选任务" tabindex="0" loading="lazy"><figcaption>使用变量获取当前所有可选任务</figcaption></figure><p>通过使用label_values函数，获取到当前Prometheus监控指标up中所有可选的job\b标签的值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>label_values(up, job)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果变量启用了Multi-value或者Include All Option选项的变量，那么在Panel的General选项的Repeat中可以选择自动迭代的变量，这里使用了Singlestat展示所有监控采集任务的状态：</p><figure><img src="`+g+'" alt="General中的Repeat选项" tabindex="0" loading="lazy"><figcaption>General中的Repeat选项</figcaption></figure>',47),v={class:"MathJax",jax:"SVG",style:{position:"relative"}},x={style:{"vertical-align":"-0.462ex"},xmlns:"http://www.w3.org/2000/svg",width:"21.1ex",height:"2.158ex",role:"img",focusable:"false",viewBox:"0 -750 9326 954","aria-hidden":"true"},Q=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(897,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">变</text></g><g data-mml-node="mi" transform="translate(2326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mi" transform="translate(3326,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(4326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(5326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">过</text></g><g data-mml-node="mi" transform="translate(6326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">此</text></g><g data-mml-node="mi" transform="translate(7326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(8326,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g></g></g>',1),T=[Q],y=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mi",null,"j"),a("mi",null,"o"),a("mi",null,"b"),a("mi",{mathvariant:"normal"},"变"),a("mi",{mathvariant:"normal"},"量"),a("mi",null,"，"),a("mi",{mathvariant:"normal"},"不"),a("mi",{mathvariant:"normal"},"过"),a("mi",{mathvariant:"normal"},"此"),a("mi",{mathvariant:"normal"},"时"),a("mi",{mathvariant:"normal"},"的")])],-1),P=a("figure",null,[a("img",{src:h,alt:"在Metric中使用变量",tabindex:"0",loading:"lazy"}),a("figcaption",null,"在Metric中使用变量")],-1),q=a("p",null,"而如果还希望能够自动生成Row，只需要在Row的设置中，选择需要Repeat的变量即可：",-1),w=a("figure",null,[a("img",{src:f,alt:"Repeat Row",tabindex:"0",loading:"lazy"}),a("figcaption",null,"Repeat Row")],-1);function D(z,G){return e(),t("div",null,[_,a("p",null,[r("Repeat选项设置完成后，Grafana会根据当前用户的选择，自动创建一个到多个Panel实例。 为了能够使Singlestat Panel能够展示正确的数据，如下所示，在Prometheus中，我们依然使用了"),a("mjx-container",v,[(e(),t("svg",x,T)),y]),r("job反应的是当前迭代的值：")]),P,q,w])}const M=i(b,[["render",D],["__file","templating.html.vue"]]);export{M as default};
