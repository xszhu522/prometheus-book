import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as a,d as n}from"./app-d7bHIUBF.js";const i="/prometheus-book/assets/slack-overview-GSbIT89w.png",l="/prometheus-book/assets/slack-create-channel-JobWOOTz.png",s="/prometheus-book/assets/slack-channel-NwtiGK8o.png",o="/prometheus-book/assets/add-incomming-webhooks-mGpS0U4H.png",r="/prometheus-book/assets/incomming-webhooks-setting-6ZDga11R.png",d="/prometheus-book/assets/slack-receiver-message-uaUBfGLB.png",c="/prometheus-book/assets/custom-slack-message-VtUX6lbo.png",g="/prometheus-book/assets/slack_alert_message-1ZyOo-4-.png",m="/prometheus-book/assets/slack_resolved_message-8LJncUvD.png",u={},p=n('<h1 id="与slack集成" tabindex="-1"><a class="header-anchor" href="#与slack集成" aria-hidden="true">#</a> 与Slack集成</h1><p>Slack是非常流行的团队沟通应用，提供群组聊天和直接消息发送功能，支持移动端，Web 和桌面平台。在国外有大量的IT团队使用Slack作为团队协作平台。同时其提供了强大的集成能力，在Slack的基础上也衍生出了大量的ChatOps相关的技术实践。这部分将介绍如何将Slack集成到Alertmanager中。</p><h2 id="认识slack" tabindex="-1"><a class="header-anchor" href="#认识slack" aria-hidden="true">#</a> 认识Slack</h2><figure><img src="'+i+'" alt="Slack" tabindex="0" loading="lazy"><figcaption>Slack</figcaption></figure><p>Slack作为一款即时通讯工具，协作沟通主要通过Channel（平台）来完成，用户可以在企业中根据用途添加多个Channel，并且通过Channel来集成各种第三方工具。</p><p>例如，我们可以为监控建立一个单独的Channel用于接收各种监控信息：</p><figure><img src="'+l+'" alt="创建Channel" tabindex="0" loading="lazy"><figcaption>创建Channel</figcaption></figure><p>通过一个独立的Channle可以减少信息对用户工作的干扰，并且将相关信息聚合在一起：</p><figure><img src="'+s+'" alt="Monitoring" tabindex="0" loading="lazy"><figcaption>Monitoring</figcaption></figure><p>Slack的强大之处在于在Channel中添加各种第三方服务的集成，用户也可以基于Slack开发自己的聊天机器人来实现一些更高级的能力，例如自动化运维，提高开发效率等。</p><h2 id="添加应用-incomming-webhooks" tabindex="-1"><a class="header-anchor" href="#添加应用-incomming-webhooks" aria-hidden="true">#</a> 添加应用：Incomming Webhooks</h2><p>为了能够在Monitoring中接收来自Alertmanager的消息，我们需要在Channel的设置选项中使用&quot;Add an App&quot;为Monitoring channel添加一个名为<code>Incoming WebHooks</code>的应用：</p><figure><img src="'+o+'" alt="添加Incomming Webhooks" tabindex="0" loading="lazy"><figcaption>添加Incomming Webhooks</figcaption></figure><p>添加成功后Slack会显示<code>Incoming WebHooks</code>配置和使用方式：</p><figure><img src="'+r+`" alt="Incomming Webhhook配置" tabindex="0" loading="lazy"><figcaption>Incomming Webhhook配置</figcaption></figure><p>Incomming Webhook的工作方式很简单，Slack为当前Channel创建了一个用于接收消息的API地址：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>https://hooks.slack.com/services/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
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用户只需要使用Post方式向Channel发送需要通知的消息即可，例如，我们可以在命令行中通过curl模拟一次消息通知：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -d &quot;payload={&#39;text&#39;: &#39;This is a line of text in a channel.\\nAnd this is another line of text.&#39;}&quot; https://hooks.slack.com/services/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
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在网络正常的情况下，在Channel中会显示新的通知信息，如下所示：</p><figure><img src="`+d+`" alt="测试消息" tabindex="0" loading="lazy"><figcaption>测试消息</figcaption></figure><p>除了发送纯文本以外，slack还支持在文本内容中添加链接，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>payload={&quot;text&quot;: &quot;A very important thing has occurred! &lt;https://alert-system.com/alerts/1234|Click here&gt; for details!&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时接收到的消息中建辉包含一个可点击的超链接地址。除了payload以外，Incomming Webhhook还支持一些其他的参数：</p><table><thead><tr><th>参数</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>username</td><td>设置当前聊天机器人的名称</td><td>webhookbot</td></tr><tr><td>icon_url</td><td>当前聊天机器人的头像地址</td><td>https://slack.com/img/icons/app-57.png</td></tr><tr><td>icon_emoji</td><td>使用emoji作为聊天机器人的头像</td><td>👻</td></tr><tr><td>channel</td><td>消息发送的目标channel, 需要直接发给特定用户时使用@username即可</td><td>#monitoring 或者 @username</td></tr></tbody></table><p>例如，使用以上参数发送一条更有趣的消息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>curl -X POST --data-urlencode &quot;payload={&#39;channel&#39;: &#39;#monitoring&#39;, &#39;username&#39;: &#39;webhookbot&#39;, &#39;text&#39;: &#39;This is posted to #monitoring and comes from a bot named webhookbot.&#39;, &#39;icon_emoji&#39;: &#39;:ghost:&#39;}&quot; https://hooks.slack.com/services/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
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="自定义消息" tabindex="0" loading="lazy"><figcaption>自定义消息</figcaption></figure><h2 id="在alertmanager中使用slack" tabindex="-1"><a class="header-anchor" href="#在alertmanager中使用slack" aria-hidden="true">#</a> 在Alertmanager中使用Slack</h2><p>在了解了Slack以及Incomming Webhhook的基本使用方式后，在Alertmanager中添加Slack支持就非常简单了。</p><p>在Alertmanager的全局配置中，将Incomming Webhhook地址作为slack_api_url添加到全局配置中即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>global:
  slack_api_url: https://hooks.slack.com/services/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
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以在每个receiver中单独定义自己的slack_configs即可：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>receivers：
- name: slack
  slack_configs:
    - channel: &#39;#monitoring&#39;
      send_resolved: true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里如果我们手动拉高当前主机的CPU利用率，在#Monitoring平台中，我们会接收到一条告警信息如下所示：</p><figure><img src="`+g+'" alt="告警信息" tabindex="0" loading="lazy"><figcaption>告警信息</figcaption></figure><p>而当告警项恢复正常后，则可以接收到如下通知：</p><figure><img src="'+m+`" alt="告警恢复信息" tabindex="0" loading="lazy"><figcaption>告警恢复信息</figcaption></figure><p>对于Incomming Webhhook支持的其它自定义参数，也可以在slack_config中进行定义，slack_config的主要配置如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>channel: &lt;tmpl_string&gt;
[ send_resolved: &lt;boolean&gt; | default = false ]
[ api_url: &lt;secret&gt; | default = global.slack_api_url ]
[ icon_emoji: &lt;tmpl_string&gt; ]
[ icon_url: &lt;tmpl_string&gt; ]
[ link_names: &lt;boolean&gt; | default = false ]
[ username: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.username&quot; . }}&#39; ]
[ color: &lt;tmpl_string&gt; | default = &#39;{{ if eq .Status &quot;firing&quot; }}danger{{ else }}good{{ end }}&#39; ]
[ footer: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.footer&quot; . }}&#39; ]
[ pretext: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.pretext&quot; . }}&#39; ]
[ text: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.text&quot; . }}&#39; ]
[ title: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.title&quot; . }}&#39; ]
[ title_link: &lt;tmpl_string&gt; | default = &#39;{{ template &quot;slack.default.titlelink&quot; . }}&#39; ]
[ image_url: &lt;tmpl_string&gt; ]
[ thumb_url: &lt;tmpl_string&gt; ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要覆盖默认的告警内容，直接使用Go Template即可。例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>color: &#39;{{ if eq .Status &quot;firing&quot; }}danger{{ else }}good{{ end }}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,42),h=[p];function b(v,k){return t(),a("div",null,h)}const x=e(u,[["render",b],["__file","alert-with-slack.html.vue"]]);export{x as default};
